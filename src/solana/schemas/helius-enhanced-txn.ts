import { z } from "zod";
import { solanaBase58AddressSchema } from "./solana";

const txnTypeSchema = z
	.enum([
		"ANY",
		"UNKNOWN",
		"CREATE",
		"NFT_BID",
		"NFT_GLOBAL_BID",
		"NFT_GLOBAL_BID_CANCELLED",
		"NFT_BID_CANCELLED",
		"NFT_LISTING",
		"NFT_CANCEL_LISTING",
		"NFT_SALE",
		"NFT_MINT",
		"NFT_AUCTION_CREATED",
		"NFT_AUCTION_UPDATED",
		"NFT_AUCTION_CANCELLED",
		"NFT_PARTICIPATION_REWARD",
		"NFT_MINT_REJECTED",
		"CREATE_STORE",
		"WHITELIST_CREATOR",
		"ADD_TO_WHITELIST",
		"REMOVE_FROM_WHITELIST",
		"AUCTION_MANAGER_CLAIM_BID",
		"EMPTY_PAYMENT_ACCOUNT",
		"UPDATE_PRIMARY_SALE_METADATA",
		"ADD_TOKEN_TO_VAULT",
		"ACTIVATE_VAULT",
		"INIT_VAULT",
		"INIT_BANK",
		"INIT_STAKE",
		"MERGE_STAKE",
		"SPLIT_STAKE",
		"SET_BANK_FLAGS",
		"SET_VAULT_LOCK",
		"UPDATE_VAULT_OWNER",
		"UPDATE_BANK_MANAGER",
		"RECORD_RARITY_POINTS",
		"ADD_RARITIES_TO_BANK",
		"INIT_FARM",
		"INIT_FARMER",
		"REFRESH_FARMER",
		"UPDATE_FARM",
		"AUTHORIZE_FUNDER",
		"DEAUTHORIZE_FUNDER",
		"FUND_REWARD",
		"CANCEL_REWARD",
		"LOCK_REWARD",
		"PAYOUT",
		"VALIDATE_SAFETY_DEPOSIT_BOX_V2",
		"SET_AUTHORITY",
		"INIT_AUCTION_MANAGER_V2",
		"UPDATE_EXTERNAL_PRICE_ACCOUNT",
		"AUCTION_HOUSE_CREATE",
		"CLOSE_ESCROW_ACCOUNT",
		"WITHDRAW",
		"DEPOSIT",
		"TRANSFER",
		"BURN",
		"BURN_NFT",
		"PLATFORM_FEE",
		"LOAN",
		"RESCIND_LOAN",
		"OFFER_LOAN",
		"CANCEL_OFFER",
		"LEND_FOR_NFT",
		"REQUEST_LOAN",
		"CANCEL_LOAN_REQUEST",
		"BORROW_SOL_FOR_NFT",
		"CLAIM_NFT",
		"REBORROW_SOL_FOR_NFT",
		"REPAY_LOAN",
		"TAKE_LOAN",
		"FORECLOSE_LOAN",
		"UPDATE_OFFER",
		"ADD_TO_POOL",
		"REMOVE_FROM_POOL",
		"CLOSE_POSITION",
		"UNLABELED",
		"CLOSE_ACCOUNT",
		"WITHDRAW_GEM",
		"DEPOSIT_GEM",
		"STAKE_TOKEN",
		"UNSTAKE_TOKEN",
		"STAKE_SOL",
		"UNSTAKE_SOL",
		"CLAIM_REWARDS",
		"BUY_SUBSCRIPTION",
		"SWAP",
		"INIT_SWAP",
		"CANCEL_SWAP",
		"REJECT_SWAP",
		"INITIALIZE_ACCOUNT",
		"TOKEN_MINT",
		"CREATE_APPRAISAL",
		"CANDY_MACHINE_WRAP",
		"CANDY_MACHINE_UNWRAP",
		"CANDY_MACHINE_UPDATE",
		"CANDY_MACHINE_ROUTE",
		"FRACTIONALIZE",
		"DEPOSIT_FRACTIONAL_POOL",
		"FUSE",
		"CREATE_RAFFLE",
		"BUY_TICKETS",
		"UPDATE_ITEM",
		"LIST_ITEM",
		"DELIST_ITEM",
		"ADD_ITEM",
		"CLOSE_ITEM",
		"BUY_ITEM",
		"FILL_ORDER",
		"UPDATE_ORDER",
		"CREATE_ORDER",
		"CLOSE_ORDER",
		"CANCEL_ORDER",
		"KICK_ITEM",
		"UPGRADE_FOX",
		"UPGRADE_FOX_REQUEST",
		"LOAN_FOX",
		"BORROW_FOX",
		"SWITCH_FOX_REQUEST",
		"SWITCH_FOX",
		"CREATE_ESCROW",
		"ACCEPT_REQUEST_ARTIST",
		"CANCEL_ESCROW",
		"ACCEPT_ESCROW_ARTIST",
		"ACCEPT_ESCROW_USER",
		"PLACE_BET",
		"PLACE_SOL_BET",
		"CREATE_BET",
		"INIT_RENT",
		"NFT_RENT_LISTING",
		"NFT_RENT_CANCEL_LISTING",
		"NFT_RENT_UPDATE_LISTING",
		"NFT_RENT_ACTIVATE",
		"NFT_RENT_END",
		"UPGRADE_PROGRAM_INSTRUCTION",
		"FINALIZE_PROGRAM_INSTRUCTION",
		"EXECUTE_TRANSACTION",
		"APPROVE_TRANSACTION",
		"ACTIVATE_TRANSACTION",
		"CREATE_TRANSACTION",
		"CANCEL_TRANSACTION",
		"REJECT_TRANSACTION",
		"ADD_INSTRUCTION",
		"CREATE_MASTER_EDITION",
		"ATTACH_METADATA",
		"REQUEST_PNFT_MIGRATION",
		"START_PNFT_MIGRATION",
		"MIGRATE_TO_PNFT",
		"UPDATE_RAFFLE",
		"CREATE_MERKLE_TREE",
		"DELEGATE_MERKLE_TREE",
		"COMPRESSED_NFT_MINT",
		"COMPRESSED_NFT_TRANSFER",
		"COMPRESSED_NFT_REDEEM",
		"COMPRESSED_NFT_CANCEL_REDEEM",
		"COMPRESSED_NFT_BURN",
		"COMPRESSED_NFT_VERIFY_CREATOR",
		"COMPRESSED_NFT_UNVERIFY_CREATOR",
		"COMPRESSED_NFT_VERIFY_COLLECTION",
		"COMPRESSED_NFT_UNVERIFY_COLLECTION",
		"COMPRESSED_NFT_SET_VERIFY_COLLECTION",
		"DECOMPRESS_NFT",
		"COMPRESS_NFT",
		"COMPRESSED_NFT_DELEGATE",
		"CREATE_POOL",
		"DISTRIBUTE_COMPRESSION_REWARDS",
		"CHANGE_COMIC_STATE",
		"UPDATE_RECORD_AUTHORITY_DATA",
	])
	.or(z.string().min(1));

const txnSourceSchema = z
	.enum([
		"FORM_FUNCTION",
		"EXCHANGE_ART",
		"CANDY_MACHINE_V3",
		"CANDY_MACHINE_V2",
		"CANDY_MACHINE_V1",
		"UNKNOWN",
		"SOLANART",
		"SOLSEA",
		"MAGIC_EDEN",
		"HOLAPLEX",
		"METAPLEX",
		"OPENSEA",
		"SOLANA_PROGRAM_LIBRARY",
		"ANCHOR",
		"PHANTOM",
		"SYSTEM_PROGRAM",
		"STAKE_PROGRAM",
		"COINBASE",
		"CORAL_CUBE",
		"HEDGE",
		"LAUNCH_MY_NFT",
		"GEM_BANK",
		"GEM_FARM",
		"DEGODS",
		"BLOCKSMITH_LABS",
		"YAWWW",
		"ATADIA",
		"DIGITAL_EYES",
		"HYPERSPACE",
		"TENSOR",
		"BIFROST",
		"JUPITER",
		"MERCURIAL_STABLE_SWAP",
		"SABER",
		"SERUM",
		"STEP_FINANCE",
		"CROPPER",
		"RAYDIUM",
		"ALDRIN",
		"CREMA",
		"LIFINITY",
		"CYKURA",
		"ORCA",
		"MARINADE",
		"STEPN",
		"SENCHA_EXCHANGE",
		"SAROS",
		"ENGLISH_AUCTION",
		"FOXY",
		"HADESWAP",
		"FOXY_STAKING",
		"FOXY_RAFFLE",
		"FOXY_TOKEN_MARKET",
		"FOXY_MISSIONS",
		"FOXY_MARMALADE",
		"FOXY_COINFLIP",
		"FOXY_AUCTION",
		"CITRUS",
		"ZETA",
		"ELIXIR",
		"ELIXIR_LAUNCHPAD",
		"CARDINAL_RENT",
		"CARDINAL_STAKING",
		"BPF_LOADER",
		"BPF_UPGRADEABLE_LOADER",
		"SQUADS",
		"SHARKY_FI",
		"OPEN_CREATOR_PROTOCOL",
		"BUBBLEGUM",
		// Mints
		"W_SOL",
		"DUST",
		"SOLI",
		"USDC",
		"FLWR",
		"HDG",
		"MEAN",
		"UXD",
		"SHDW",
		"POLIS",
		"ATLAS",
		"USH",
		"TRTLS",
		"RUNNER",
		"INVICTUS",
		"PUMP_FUN",
	])
	.or(z.string().min(1));

const tokenStandardSchema = z
	.enum([
		"ProgrammableNonFungible",
		"NonFungible",
		"Fungible",
		"FungibleAsset",
		"NonFungibleEdition",
		"UnknownStandard",
	])
	.or(z.string().min(1));

const nativeTransferSchema = z.object({
	fromUserAccount: solanaBase58AddressSchema.nullable(),
	toUserAccount: solanaBase58AddressSchema.nullable(),
	amount: z.number().min(0),
});

const nativeBalanceChangeSchema = z.object({
	account: solanaBase58AddressSchema,
	amount: z.number().min(0),
});

const tokenTransferSchema = z.object({
	// The from accounts can be empty strings on token mint transactions
	fromUserAccount: solanaBase58AddressSchema.or(z.literal("")).nullable(),
	toUserAccount: solanaBase58AddressSchema.nullable(),
	fromTokenAccount: solanaBase58AddressSchema.or(z.literal("")).nullable(),
	toTokenAccount: solanaBase58AddressSchema.nullable(),
	tokenAmount: z.number().min(0),
	decimals: z.number().min(0).nullish(),
	tokenStandard: tokenStandardSchema,
	mint: solanaBase58AddressSchema.min(1),
});

const rawTokenAmountSchema = z.object({
	tokenAmount: z.number(),
	decimals: z.number().min(0),
});

const tokenBalanceChangeSchema = z.object({
	userAccount: solanaBase58AddressSchema,
	tokenAccount: solanaBase58AddressSchema,
	rawTokenAmount: rawTokenAmountSchema,
	mint: solanaBase58AddressSchema,
});

const accountDataSchema = z.object({
	account: solanaBase58AddressSchema,
	nativeBalanceChange: z.number(),
	tokenBalanceChange: tokenBalanceChangeSchema.array().nullish(),
});

const transactionErrorSchema = z.string().or(z.record(z.never(), z.never()));

const defaultInstructionSchema = z.object({
	accounts: solanaBase58AddressSchema.array(),
	data: z.string(),
	programId: z.string().min(1),
});

const instructionSchema = defaultInstructionSchema.extend({
	innerInstructions: defaultInstructionSchema.array(),
});

export const enhancedTxnSchema = z.object({
	description: z.string(),
	type: txnTypeSchema,
	source: txnSourceSchema,
	fee: z.number().min(0),
	feePayer: solanaBase58AddressSchema,
	signature: z.string().min(1),
	slot: z.number().min(0),
	timestamp: z.number().min(0),
	nativeTransfers: nativeTransferSchema.array().nullish(),
	tokenTransfers: tokenTransferSchema.array().nullish(),
	accountData: accountDataSchema.array(),
	transactionError: transactionErrorSchema.nullish(),
	instructions: instructionSchema.array(),
});

export type NativeTransfer = z.infer<typeof nativeTransferSchema>;
export type NativeBalanceChange = z.infer<typeof nativeBalanceChangeSchema>;
export type TokenTransfer = z.infer<typeof tokenTransferSchema>;
export type AccountData = z.infer<typeof accountDataSchema>;
export type InnerInstruction = z.infer<typeof defaultInstructionSchema>;
export type Instruction = z.infer<typeof instructionSchema>;
export type EnhancedTxn = z.infer<typeof enhancedTxnSchema>;
